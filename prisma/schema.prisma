generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hash String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  portfolios Portfolio[]
  blogs    Blog[]

  role   Role @default(USER)
  accounts      Account[]
 
}


model Portfolio{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   user User@relation(fields: [userId], references: [id])
   userId String @db.ObjectId
   name String
   description String
   cover  String?
   tools Tool[]

}

type Tool{
  name String
  image String?
}
model FrameWork{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   name String
  image String?

}

model Contact{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   name String
  email String
  subject String
  message String

}


model Blog{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   user User@relation(fields: [userId], references: [id])
   userId String @db.ObjectId
   title String 
   description String
   cover  String?
   category String

}


model  Notification{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   title String
   message String
  
   isRead  Boolean @default(false)
   type String @default("Success")
   url String?

}





enum Role{
   USER
    ADMIN
   
}